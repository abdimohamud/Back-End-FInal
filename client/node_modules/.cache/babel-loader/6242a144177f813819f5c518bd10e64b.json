{"ast":null,"code":"import axios from 'axios';\nimport { authHeader } from '../helpers';\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(email, password) {\n  const userData = {\n    email: email,\n    password: password\n  };\n  axios.post(\"/api/users/login\", userData).then(res => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  }).catch(err => console.log(\"Issue logging in. File: redux/services/under.service.js\"));\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: userData\n  };\n  return fetch(`/users/login`, requestOptions).then(handleResponse).then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(),\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);\n  ;\n} // prefixed function name with underscore because delete is a reserved word in javascript\n\n\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}","map":{"version":3,"sources":["/home/matthew/Documents/GitHub/FyreSale/client/src/redux/services/user.service.js"],"names":["axios","authHeader","userService","login","logout","register","getAll","getById","update","delete","_delete","email","password","userData","post","then","res","localStorage","setItem","JSON","stringify","user","catch","err","console","log","requestOptions","method","headers","body","fetch","handleResponse","removeItem","id","response","text","data","parse","ok","status","error","message","statusText","Promise","reject"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { authHeader } from '../helpers';\n\nexport const userService = {\n  login,\n  logout,\n  register,\n  getAll,\n  getById,\n  update,\n  delete: _delete\n};\n\nfunction login(email, password) {\n  const userData = {\n    email: email,\n    password: password\n  }\n  axios\n  .post(\"/api/users/login\", userData)\n  .then(res => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  })\n  .catch(err =>\n    console.log(\"Issue logging in. File: redux/services/under.service.js\")\n  );\n\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: userData\n  };\n\n  return fetch(`/users/login`, requestOptions)\n  .then(handleResponse)\n  .then(user => {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n\n    return user;\n  });\n}\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('user');\n}\n\nfunction getAll() {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n\n  return fetch(`/users`, requestOptions).then(handleResponse);\n}\n\nfunction getById(id) {\n  const requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction register(user) {\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(user)\n  };\n\n  return fetch(`/users/register`, requestOptions).then(handleResponse);\n}\n\nfunction update(user) {\n  const requestOptions = {\n    method: 'PUT',\n    headers: { ...authHeader(), 'Content-Type': 'application/json' },\n    body: JSON.stringify(user)\n  };\n\n  return fetch(`/users/${user.id}`, requestOptions).then(handleResponse);;\n}\n\n// prefixed function name with underscore because delete is a reserved word in javascript\nfunction _delete(id) {\n  const requestOptions = {\n    method: 'DELETE',\n    headers: authHeader()\n  };\n\n  return fetch(`/users/${id}`, requestOptions).then(handleResponse);\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}